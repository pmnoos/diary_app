# Example: Future migration to PostgreSQL
# 1. Install PostgreSQL
# pip install psycopg2-binary

# 2. Update settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'diary_db',
        'USER': 'diary_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# 3. Migrate data
# python manage.py dumpdata > data.json
# python manage.py migrate
# python manage.py loaddata data.json

# ================================
# HOSTING CONSIDERATIONS
# ================================

# SQLITE HOSTING - GOOD OPTIONS:
# ✅ Heroku (with limitations)
# ✅ Railway.app
# ✅ DigitalOcean App Platform
# ✅ PythonAnywhere
# ✅ Vercel (with caveats)
# ✅ Render.com

# SQLITE HOSTING - LIMITATIONS:
# ❌ Ephemeral file systems (Heroku dynos restart)
# ❌ Read-only file systems (some platforms)
# ❌ No persistent storage (without volumes)

# POSTGRESQL HOSTING - REQUIRED FOR:
# ✅ Heroku (recommended)
# ✅ Railway.app (built-in PostgreSQL)
# ✅ DigitalOcean (managed databases)
# ✅ AWS/Google Cloud (production scale)

# HOSTING MIGRATION STRATEGY:
# 1. Start with SQLite-friendly platforms
# 2. Migrate to PostgreSQL when scaling needs require it
# 3. Use managed database services for production
